//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum CalendarVisibility {
    hidden
    link
    feed
}

/// @@allow('create', true)
/// @@allow('read', true)
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    image String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    accounts Account[]
    sessions Session[]
    calendars Calendar[]
}

/// @@allow('all', auth() == user)
model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth() == user)
model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.Text()
    access_token String? @db.Text()
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text()
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

/// @@allow('read', visiiblity != hidden || auth() == user)
/// @@allow('all', auth() == user)
model Calendar {
    id String @id() @default(cuid())
    title String
    description String
    rows Int
    startDate DateTime @default(now())
    visiiblity CalendarVisibility
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    events Event[]
}

/// @@allow('read', calendar.visiiblity != hidden || auth() == calendar.user)
/// @@allow('all', auth() == calendar.user)
model Event {
    id Int @id() @default(autoincrement())
    title String
    date String
    calendarId String
    calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
}